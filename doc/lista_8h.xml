<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="lista_8h" kind="file" language="C++">
    <compoundname>lista.h</compoundname>
    <includedby refid="camadaDeDados_8h" local="yes">camadaDeDados.h</includedby>
    <includedby refid="logica_8h" local="yes">logica.h</includedby>
    <includedby refid="interface_8c" local="yes">interface.c</includedby>
    <includedby refid="interface_8h" local="yes">interface.h</includedby>
    <includedby refid="lista_8c" local="yes">lista.c</includedby>
    <includedby refid="logica_8c" local="yes">logica.c</includedby>
    <invincdepgraph>
      <node id="24">
        <label>lista.h</label>
        <link refid="lista_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>camadaDeDados.h</label>
        <link refid="camadaDeDados_8h_source"/>
      </node>
      <node id="26">
        <label>logica.h</label>
        <link refid="logica_8h_source"/>
      </node>
      <node id="27">
        <label>interface.h</label>
        <link refid="interface_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structlista" prot="public">lista</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="lista_8h_1acfb1dbdea7214f3efb9334ffef161dad" prot="public" static="no">
        <type>struct <ref refid="structlista" kindref="compound">lista</ref> *</type>
        <definition>typedef struct lista* LISTA</definition>
        <argsstring></argsstring>
        <name>LISTA</name>
        <briefdescription>
<para>Struct de lista ligada generalizada, ou seja, com void. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lista.h" line="16" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="lista_8h_1ae3b99323b6f8f35d80bb69ff1a27985e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structlista" kindref="compound">LISTA</ref></type>
        <definition>LISTA criar_lista</definition>
        <argsstring>()</argsstring>
        <name>criar_lista</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Funções criadas no .c <simplesect kind="return"><para></para></simplesect>
Função que cria uma lista vazia <simplesect kind="return"><para>lista </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lista.h" line="22" column="1" bodyfile="lista.c" bodystart="9" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="lista_8h_1aa9464b296b7a55af908934b3007f5712" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structlista" kindref="compound">LISTA</ref></type>
        <definition>LISTA proximo</definition>
        <argsstring>(LISTA *l)</argsstring>
        <name>proximo</name>
        <param>
          <type><ref refid="structlista" kindref="compound">LISTA</ref> *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Da o proximo valor da lista <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista ligada </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>retorna o proximo da lista </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lista.h" line="23" column="1" bodyfile="lista.c" bodystart="29" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="lista_8h_1a8471aa9581af95e1417a0e59d9e3542c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freeList</definition>
        <argsstring>(LISTA *l)</argsstring>
        <name>freeList</name>
        <param>
          <type><ref refid="structlista" kindref="compound">LISTA</ref> *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Esta função libera os elementos da lista <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista ligada </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lista.h" line="24" column="1" bodyfile="lista.c" bodystart="37" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="lista_8h_1aa41ba0e589620103449550ab91121aca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void insere_cabeca</definition>
        <argsstring>(LISTA *l, void *valor)</argsstring>
        <name>insere_cabeca</name>
        <param>
          <type><ref refid="structlista" kindref="compound">LISTA</ref> *</type>
          <declname>l</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>valor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insere na cabeça da lista o valor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista ligada </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>valor</parametername>
</parameternamelist>
<parameterdescription>
<para>pode receber qualquer valor </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lista.h" line="25" column="1" bodyfile="lista.c" bodystart="18" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="lista_8h_1a8cb8431dc543891d916899135893db0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void remove_cabeca</definition>
        <argsstring>(LISTA *l)</argsstring>
        <name>remove_cabeca</name>
        <param>
          <type><ref refid="structlista" kindref="compound">LISTA</ref> *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove a cabeça da lista <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>lista ligada </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lista.h" line="26" column="1" bodyfile="lista.c" bodystart="52" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="lista_8h_1a8424d69f60510800eee6a678f461fc3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lista_vazia</definition>
        <argsstring>(LISTA l)</argsstring>
        <name>lista_vazia</name>
        <param>
          <type><ref refid="structlista" kindref="compound">LISTA</ref></type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verifica se a lista está vazia <simplesect kind="return"><para>1 caso a lista esteja vazia </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lista.h" line="27" column="1" bodyfile="lista.c" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="lista_8h_1a7daf2472369dc2617e86e90118cc01e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tamanho_lista</definition>
        <argsstring>(LISTA l)</argsstring>
        <name>tamanho_lista</name>
        <param>
          <type><ref refid="structlista" kindref="compound">LISTA</ref></type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Esta função calcula o tamanho da lista <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>lista </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>tamanho da lista </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lista.h" line="28" column="1" bodyfile="lista.c" bodystart="71" bodyend="78"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>LI2_LISTA_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LI2_LISTA_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="7" refid="structlista" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlista" kindref="compound">lista</ref><sp/>{</highlight></codeline>
<codeline lineno="11" refid="structlista_1a1851230b0237deef0519ee33de9f2dd0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structlista_1a1851230b0237deef0519ee33de9f2dd0" kindref="member">valor</ref>;</highlight></codeline>
<codeline lineno="15" refid="structlista_1a3b0e375147c1163d74544fd206a1f1de" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structlista" kindref="compound">lista</ref><sp/>*<ref refid="structlista_1a3b0e375147c1163d74544fd206a1f1de" kindref="member">prox</ref>;</highlight></codeline>
<codeline lineno="16"><highlight class="normal">}*<ref refid="structlista" kindref="compound">LISTA</ref>;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><ref refid="structlista" kindref="compound">LISTA</ref><sp/>criar_lista();</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><ref refid="structlista" kindref="compound">LISTA</ref><sp/>proximo(<ref refid="structlista" kindref="compound">LISTA</ref><sp/>*l);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freeList(<ref refid="structlista" kindref="compound">LISTA</ref><sp/>*l);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>insere_cabeca(<ref refid="structlista" kindref="compound">LISTA</ref><sp/>*l,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structlista_1a1851230b0237deef0519ee33de9f2dd0" kindref="member">valor</ref>);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>remove_cabeca(<ref refid="structlista" kindref="compound">LISTA</ref><sp/>*l);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lista_vazia(<ref refid="structlista" kindref="compound">LISTA</ref><sp/>l);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tamanho_lista(<ref refid="structlista" kindref="compound">LISTA</ref><sp/>l);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//LI2_LISTA_H</highlight></codeline>
    </programlisting>
    <location file="lista.h"/>
  </compounddef>
</doxygen>
