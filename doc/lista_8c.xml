<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="lista_8c" kind="file" language="C++">
    <compoundname>lista.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes refid="lista_8h" local="yes">lista.h</includes>
    <incdepgraph>
      <node id="20">
        <label>stdlib.h</label>
      </node>
      <node id="18">
        <label>lista.c</label>
        <link refid="lista_8c"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>lista.h</label>
        <link refid="lista_8h_source"/>
      </node>
      <node id="19">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="lista_8c_1ae3b99323b6f8f35d80bb69ff1a27985e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structlista" kindref="compound">LISTA</ref></type>
        <definition>LISTA criar_lista</definition>
        <argsstring>()</argsstring>
        <name>criar_lista</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Função que cria uma lista vazia <simplesect kind="return"><para>lista </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lista.c" line="9" column="1" bodyfile="lista.c" bodystart="9" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="lista_8c_1aa41ba0e589620103449550ab91121aca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void insere_cabeca</definition>
        <argsstring>(LISTA *l, void *valor)</argsstring>
        <name>insere_cabeca</name>
        <param>
          <type><ref refid="structlista" kindref="compound">LISTA</ref> *</type>
          <declname>l</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>valor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insere na cabeça da lista o valor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista ligada </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>valor</parametername>
</parameternamelist>
<parameterdescription>
<para>pode receber qualquer valor </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lista.c" line="18" column="1" bodyfile="lista.c" bodystart="18" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="lista_8c_1aa9464b296b7a55af908934b3007f5712" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structlista" kindref="compound">LISTA</ref></type>
        <definition>LISTA proximo</definition>
        <argsstring>(LISTA *l)</argsstring>
        <name>proximo</name>
        <param>
          <type><ref refid="structlista" kindref="compound">LISTA</ref> *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Da o proximo valor da lista <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista ligada </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>retorna o proximo da lista </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lista.c" line="29" column="1" bodyfile="lista.c" bodystart="29" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="lista_8c_1a8471aa9581af95e1417a0e59d9e3542c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void freeList</definition>
        <argsstring>(LISTA *l)</argsstring>
        <name>freeList</name>
        <param>
          <type><ref refid="structlista" kindref="compound">LISTA</ref> *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Esta função libera os elementos da lista <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista ligada </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lista.c" line="37" column="1" bodyfile="lista.c" bodystart="37" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="lista_8c_1a8cb8431dc543891d916899135893db0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void remove_cabeca</definition>
        <argsstring>(LISTA *l)</argsstring>
        <name>remove_cabeca</name>
        <param>
          <type><ref refid="structlista" kindref="compound">LISTA</ref> *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove a cabeça da lista <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>lista ligada </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lista.c" line="52" column="1" bodyfile="lista.c" bodystart="52" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="lista_8c_1a8424d69f60510800eee6a678f461fc3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lista_vazia</definition>
        <argsstring>(LISTA l)</argsstring>
        <name>lista_vazia</name>
        <param>
          <type><ref refid="structlista" kindref="compound">LISTA</ref></type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verifica se a lista está vazia <simplesect kind="return"><para>1 caso a lista esteja vazia </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lista.c" line="62" column="1" bodyfile="lista.c" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="lista_8c_1a7daf2472369dc2617e86e90118cc01e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tamanho_lista</definition>
        <argsstring>(LISTA l)</argsstring>
        <name>tamanho_lista</name>
        <param>
          <type><ref refid="structlista" kindref="compound">LISTA</ref></type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Esta função calcula o tamanho da lista <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>lista </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>tamanho da lista </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="lista.c" line="71" column="1" bodyfile="lista.c" bodystart="71" bodyend="78"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;lista.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><ref refid="structlista" kindref="compound">LISTA</ref><sp/>criar_lista(){</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><ref refid="structlista" kindref="compound">LISTA</ref><sp/>d<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="12"><highlight class="normal">}</highlight></codeline>
<codeline lineno="18"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>insere_cabeca(<ref refid="structlista" kindref="compound">LISTA</ref><sp/>*l,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*valor)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlista" kindref="compound">LISTA</ref><sp/>d<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structlista" kindref="compound">lista</ref>));</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>d-&gt;valor<sp/>=<sp/>valor;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>d-&gt;prox<sp/>=<sp/>(*l);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>*l<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><ref refid="structlista" kindref="compound">LISTA</ref><sp/>proximo(<ref refid="structlista" kindref="compound">LISTA</ref><sp/>*l){</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlista" kindref="compound">LISTA</ref><sp/>r<sp/>=<sp/>(*l)<sp/>-&gt;<sp/>prox;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freeList(<ref refid="structlista" kindref="compound">LISTA</ref><sp/>*l)<sp/><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlista" kindref="compound">LISTA</ref><sp/>current<sp/>=<sp/>(*l);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>(*l)<sp/>-&gt;<sp/>prox;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(*l);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*l)<sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>remove_cabeca(<ref refid="structlista" kindref="compound">LISTA</ref><sp/>*l){</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlista" kindref="compound">LISTA</ref><sp/>current;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/>(*l)<sp/>-&gt;<sp/>prox;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>free(*l);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>(*l)<sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lista_vazia(<ref refid="structlista" kindref="compound">LISTA</ref><sp/>l){</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tamanho_lista(<ref refid="structlista" kindref="compound">LISTA</ref><sp/>l){</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t=0;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(l){</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t++;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>l-&gt;prox;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="lista.c"/>
  </compounddef>
</doxygen>
